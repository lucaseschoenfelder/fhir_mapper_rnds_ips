from flask import Flask, jsonify, make_response, request
import requests
from flask_cors import CORS
from fhir.resources.patient import Patient
from fhir.resources.identifier import Identifier
from fhir.resources.humanname import HumanName
from fhir.resources.extension import Extension
from fhirpathpy import evaluate

app = Flask(__name__)

CORS(app)

def lookup(system, code):
    r = requests.get(f'{system}&code={code}')
    if r.status_code == 200:
        return evaluate(r.json(), "Parameters.parameter.where(name='display').valueString")
    else:
        print(f'Falha ao fazer lookup')
        return None

@app.route('/condition_BRCID10Avaliado', methods=['POST'])
def map_condition_BRCID10Avaliado():
    condition_rnds = request.get_json()

    if condition_rnds:

        condition_code_coding_code = evaluate(condition_rnds, "Condition.code[0].code.coding.code")[0] #TODO: Verificar preenchimento desse
        condition_code_coding_system = evaluate(condition_rnds, "Condition.code[0].code.coding.system")[0] #TODO: Verificar preenchimento desse

        condition_subject = evaluate(condition_rnds, "Condition.subject.identifier[0].value")[0]


        condition = {
            "resourceType" : "Condition",
            "_clinicalStatus" : {
                "extension": [
                    {
                        "url": "http://hl7.org/fhir/StructureDefinition/data-absent-reason",
                        "valueCode": "unknown"
                    }
                ]
            },
            "code" : [
                {
                    "coding" : {
                        "system" : condition_code_coding_system,
                        "code" : condition_code_coding_code
                    }
                }
            ],
            "subject" : {
                "reference" : condition_subject
            }
        }

        if len(evaluate(condition_rnds, "Condition.verificationStatus")) > 0:
            condition_verificationStatus = evaluate(condition_rnds, "Condition.verificationStatus.coding.code")[0] # TODO: confirmar preenchimento desse campo

            patient["verificationStatus"] = {
                "coding" : {
                    "code" : condition_verificationStatus
                }
            }

        if len(evaluate(condition_rnds, "Condition.category")) > 0:
            condition_category_conding_code = evaluate(condition_rnds, "Condition.category[0].coding.code")[0] # TODO: confirmar preenchimento desse campo
        
            patient["category"] = {
                "coding" : {
                    "code" : condition_category_conding_code
                }
            }

        return jsonify({'resource': Condition(**condition).dict()}), 200

@app.route('/patient', methods=['POST'])
def map_patient():
    patient_rnds = request.get_json()

    if patient_rnds:

        # adicionar query CNS
        identifier_system = evaluate(patient_rnds, "Patient.identifier.where(system='https://rnds-fhir.saude.gov.br/NamingSystem/cpf').system")[0]

        identifier_value = evaluate(patient_rnds, "Patient.identifier.where(system='https://rnds-fhir.saude.gov.br/NamingSystem/cpf').value")[0]

        name_text = evaluate(patient_rnds, "Patient.name.where(use='official').text")[0]

        gender = evaluate(patient_rnds, "Patient.gender")[0]
        
        birth_date = evaluate(patient_rnds, "Patient.birthDate")[0]

        patient = {
            "resourceType" : "Patient",
            "identifier" : [
                {
                    "system" : identifier_system,
                    "value" : identifier_value
                }
            ],
            "name" : [
                {
                    "text" : name_text,
                    "_family" : {
                        "extension": [
                            {
                                "url": "http://hl7.org/fhir/StructureDefinition/data-absent-reason",
                                "valueCode": "unknown"
                            }
                        ]
                    },
                    "_given" : [
                        {
                            "extension": [
                                {
                                    "url": "http://hl7.org/fhir/StructureDefinition/data-absent-reason",
                                    "valueCode": "unknown"
                                }
                            ]
                        }
                    ]
                }
            ],
            "gender" : gender,
            "birthDate" : birth_date,
            "generalPractitioner" : [
                {
                    "extension": [
                            {
                                "url": "http://hl7.org/fhir/StructureDefinition/data-absent-reason",
                                "valueCode": "unknown"
                            }
                        ]
                }
            ]
        }
        
        if len(evaluate(patient_rnds, "Patient.address")) > 0:
            address_line = evaluate(patient_rnds, "Patient.address.where(use='home').line")
            address_city = evaluate(patient_rnds, "Patient.address.where(use='home').city")[0]
            address_state = evaluate(patient_rnds, "Patient.address.where(use='home').state")[0]
            address_postalCode = evaluate(patient_rnds, "Patient.address.where(use='home').postalCode")[0]

            # query for city
            query = lookup('https://oclapi2.gointerop.com/fhir/CodeSystem/$lookup?system=http://www.saude.gov.br/fhir/r4/CodeSystem/BRDivisaoGeograficaBrasil', address_city)
            if query is not None:
                address_city = query[0]

            #query for state
            query = lookup('https://oclapi2.gointerop.com/fhir/CodeSystem/$lookup?system=http://www.saude.gov.br/fhir/r4/CodeSystem/BRDivisaoGeograficaBrasil', address_state)
            if query is not None:
                address_state = query[0]
            
            #adicionar tipo logradouro

            patient["address"] = [
                {
                    "use" : "home",
                    "type" : "physical",
                    "text" : " ".join(address_line),
                    "city" : address_city,
                    "state" : address_state,
                    "postalCode" : address_postalCode
                }
            ]
        
        if len(evaluate(patient_rnds, "Patient.telecom")) > 0:
            telecom_value = evaluate(patient_rnds, "Patient.telecom.where(system='phone').value")[0]
            telecom_use = evaluate(patient_rnds, "Patient.telecom.where(system='phone').use")[0]

            patient["telecom"] = [
                {
                    "system" : "phone",
                    "value" : telecom_value
                }
            ]


        return jsonify({'resource': Patient(**patient).dict()}), 200

if  __name__ == '__main__': 
    app.run(host='0.0.0.0', port=5000, debug=True)